#lang racket

(require 2htdp/image)
(require net/url net/uri-codec net/base64 json)

(define accept-socket
  (lambda (listener)
    (begin
      (define-values (in out) (tcp-accept listener))
      (newline)
      (write "New connection received"))))

(define start-webserver
  (lambda (porta)
    (begin
      (write "Scheme WebServer is listening...")
      (define accept-socket (tcp-listen porta 5 #t))
      (define (loop)
        (accept-and-handle accept-socket)
        (loop))
      (define t (thread loop))
      (lambda ()
        (kill-thread t)
        (tcp-close accept-socket)))))

(define (accept-and-handle listener)
  (define-values (in out) (tcp-accept listener))
  (thread
   (lambda ()
     (handle in out)
     (close-input-port in)
     (close-output-port out))))

(define (handle in out)
  (define url
    (read-line in))
  (define url-splitted
    (list-ref (string-split url) 1))
  (define extension
    (if(string=? url-splitted "/")
       "html"
       (list-ref (string-split url-splitted ".") 1)))
  (define file
    (lambda (url-splitted)
    (if(string=? url-splitted "/")
       "/index.html"
       url-splitted)))
  (if(file-exists? (full-path (file url-splitted)))
     (status-ok out (full-path (file url-splitted)) extension)
     (status-not-found out)))

(define full-path
  (lambda (file)
    (string->path
     (string-append "/home/rafael/Desktop/GitHub/WebServer/files" file))))

(define status-ok
  (lambda (out file-path extension)
    (define response-header
      (set-content-type extension))
    (display "HTTP/1.0 200 Okay\r\n" out)
    (display response-header out)
    (cond ((string=? extension "html") (display (file-content file-path) out))
          ((string=? extension "jpg") (process-image (file-content file-path) out file-path))
          ((string=? extension "png") (process-image (file-content file-path) out file-path))
          ((string=? extension "gif") (process-image (file-content file-path) out file-path))
          ((string=? extension "js") (display (file-content file-path) out))
          ((string=? extension "css") (display (file-content file-path) out)))))

(define process-image
  (lambda (image out path)
    (display (file->bytes path) out)))

(define set-content-type
  (lambda (extension)
    (cond ((string=? extension "html") "Server: Scheme WebServer\r\nContent-Type: text/html\r\n\r\n")
          ((string=? extension "jpg") "Server: Scheme WebServer\r\nContent-Type: image/jpg\r\n\r\n")
          ((string=? extension "png") "Server: Scheme WebServer\r\nContent-Type: image/png\r\n\r\n")
          ((string=? extension "gif") "Server: Scheme WebServer\r\nContent-Type: image/gif\r\n\r\n")
          ((string=? extension "js") "Server: Scheme WebServer\r\nContent-Type: text/html\r\n\r\n")
          ((string=? extension "css") "Server: Scheme WebServer\r\nContent-Type: text/html\r\n\r\n"))))

(define status-not-found
  (lambda (out)
    (write "Error: Page not found!")
    (newline)
    (display "HTTP/1.1 404 Not Found\r\n" out)
    (display "Server: Scheme WebServer\r\nContent-Type: text/html\r\n\r\n" out)
    (display "<html><body>Page not found</body></html>" out)))

(define file-content
  (lambda(file-path)
    (apply string (file->char_list file-path))))

(define (file->char_list path)
 (call-with-input-file path
   (lambda (input-port)
     (let loop ((x (read-char input-port)))
       (cond 
        ((eof-object? x) '())
        (#t (begin (cons x (loop (read-char input-port))))))))))

(start-webserver 8080)
